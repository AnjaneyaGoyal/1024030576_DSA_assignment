#include <iostream>
using namespace std;

class CQueue {
private:
    int *arr;
    int front, rear, size;

public:
    CQueue(int n) {
        size = n;
        front = -1;
        rear = -1;
        arr = new int[size];
    }

    ~CQueue() {
        delete[] arr;
    }

    bool isEmpty() const {
        return (front == -1);
    }

    bool isFull() const {
        return ((rear + 1) % size == front);
    }

    void enqueue(int item) {
        if (isFull()) {
            cout << "Queue is full!" << endl;
            return;
        }

        if (isEmpty()) {
            front = rear = 0;
        } else {
            rear = (rear + 1) % size;
        }

        arr[rear] = item;
        cout << item << " enqueued into queue." << endl;
    }

    void dequeue() {
        if (isEmpty()) {
            cout << "Queue is empty!" << endl;
            return;
        }

        int removedVal = arr[front];
        cout << removedVal << " dequeued from queue." << endl;


        if (front == rear) {
            front = rear = -1;
        } else {
            front = (front + 1) % size;
        }
    }

    void peek() const {
        if (isEmpty()) {
            cout << "Queue is empty!" << endl;
        } else {
            cout << "Front element: " << arr[front] << endl;
        }
    }

    void display() const {
        if (isEmpty()) {
            cout << "Queue is empty!" << endl;
            return;
        }

        cout << "Queue elements: ";
        int i = front;
        while (true) {
            cout << arr[i] << " ";
            if (i == rear)
                break;
            i = (i + 1) % size;
        }
        cout << endl;
    }
};

int main() {
    int n;
    cout << "Enter size of circular queue: ";
    cin >> n;

    CQueue q(n);
    int choice = 0, item;

    do {
        
        cout << "1. Enqueue\n2. Dequeue\n3. Check if Empty\n4. Check if Full\n5. Display Queue\n6. Peek\n7. Exit" << endl;
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
        case 1:
            cout << "Enter value to enqueue: ";
            cin >> item;
            q.enqueue(item);
            break;

        case 2:
            q.dequeue();
            break;

        case 3:
            cout << (q.isEmpty() ? "Queue is empty." : "Queue is not empty.") << endl;
            break;

        case 4:
            cout << (q.isFull() ? "Queue is full." : "Queue is not full.") << endl;
            break;

        case 5:
            q.display();
            break;

        case 6:
            q.peek();
            break;

        case 7:
            cout << "Exit" << endl;
            break;

        default:
            cout << "Invalid" << endl;
        }
    } while (choice != 7);

    return 0;
}
